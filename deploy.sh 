#!/bin/bash

# Script de despliegue para Maya Digital Platform
echo "🚀 Iniciando despliegue de Maya Digital Platform..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Función para logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

# Verificar que Docker esté ejecutándose
if ! docker --version > /dev/null 2>&1; then
    error "Docker no está instalado o no está ejecutándose"
    exit 1
fi

if ! docker-compose --version > /dev/null 2>&1; then
    error "Docker Compose no está instalado"
    exit 1
fi

# Verificar estructura de directorios
log "Verificando estructura de proyecto..."
if [ ! -f "docker-compose.yml" ]; then
    error "docker-compose.yml no encontrado en el directorio actual"
    exit 1
fi

if [ ! -d "backend" ]; then
    error "Directorio backend/ no encontrado"
    exit 1
fi

if [ ! -d "frontend" ]; then
    error "Directorio frontend/ no encontrado"
    exit 1
fi

# Verificar archivo .env
if [ ! -f ".env" ]; then
    warn "Archivo .env no encontrado, creando uno por defecto..."
    cat > .env << EOF
DATABASE_URL=postgresql://postgres:password123@localhost:5433/maya_digital_platform
JWT_SECRET=tu-clave-secreta-muy-segura-cambiar-en-produccion-maya2024
RUST_LOG=info
PORT=8080
EOF
    log "Archivo .env creado. Por favor, revisa y actualiza las credenciales."
fi

# Parar contenedores existentes
log "Deteniendo contenedores existentes..."
docker-compose down --remove-orphans

# Limpiar imágenes antiguas (opcional)
read -p "¿Deseas limpiar imágenes de Docker existentes? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log "Limpiando imágenes de Docker..."
    docker system prune -f
    docker-compose build --no-cache
else
    log "Construyendo imágenes..."
    docker-compose build
fi

# Iniciar servicios
log "Iniciando servicios..."
docker-compose up -d

# Esperar a que PostgreSQL esté listo
log "Esperando a que PostgreSQL esté listo..."
for i in {1..30}; do
    if docker-compose exec -T postgres pg_isready -U postgres > /dev/null 2>&1; then
        log "PostgreSQL está listo"
        break
    fi
    echo -n "."
    sleep 2
    if [ $i -eq 30 ]; then
        error "PostgreSQL no pudo iniciarse en 60 segundos"
        docker-compose logs postgres
        exit 1
    fi
done

# Verificar que el backend esté respondiendo
log "Verificando backend..."
for i in {1..20}; do
    if curl -s http://localhost:8080/health > /dev/null 2>&1; then
        log "Backend está respondiendo"
        break
    fi
    echo -n "."
    sleep 3
    if [ $i -eq 20 ]; then
        error "Backend no responde después de 60 segundos"
        docker-compose logs backend
        exit 1
    fi
done

# Verificar que el frontend esté sirviendo
log "Verificando frontend..."
for i in {1..10}; do
    if curl -s http://localhost:3000 > /dev/null 2>&1; then
        log "Frontend está sirviendo"
        break
    fi
    echo -n "."
    sleep 2
    if [ $i -eq 10 ]; then
        warn "Frontend no responde, pero puede estar aún cargando"
    fi
done

# Mostrar estado de los servicios
log "Estado de los servicios:"
docker-compose ps

# Mostrar información de conexión
echo ""
log "🎉 Despliegue completado!"
echo ""
echo "📱 Frontend: http://localhost:3000"
echo "🔧 Backend API: http://localhost:8080"
echo "🗄️  PostgreSQL: localhost:5433"
echo "📊 Health Check: http://localhost:8080/health"
echo ""
echo "👤 Usuario admin por defecto:"
echo "   Email: admin@mayadigital.com"
echo "   Password: admin123"
echo ""
echo "📋 Comandos útiles:"
echo "   Ver logs: docker-compose logs -f [servicio]"
echo "   Detener: docker-compose down"
echo "   Reiniciar: docker-compose restart [servicio]"
echo "   Entrar a PostgreSQL: docker-compose exec postgres psql -U postgres -d maya_digital_platform"
echo ""

# Verificar conectividad final
log "Verificación final de servicios..."
health_response=$(curl -s http://localhost:8080/health)
if echo "$health_response" | grep -q "funcionando correctamente"; then
    log "✅ Todos los servicios están funcionando correctamente"
else
    warn "⚠️  Algunos servicios pueden no estar completamente listos"
    echo "Respuesta del health check: $health_response"
fi